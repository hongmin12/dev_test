<?xml version="1.0" encoding="UTF-8"?>

<!-- 
	DTD(Document Type Definition)
	- 작성한 문서가 어떤 문서인지에 대해서 정의해 놓은 것을 말함.
	- 하나의 시스템 내에서 사용할 xml 데이터의 구조를 정의하여
	  유효성을 점검 시 사용하는 태그.
 -->

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<!-- 
	- namespace 명은 패키지명을 포함해서 DAO 인터페이스 이름을
  		  사용하는 것이 관례임.
  	- namespace 명은 mapper들을 구분하는데 식별자로 사용이 됨.
 -->
  
<mapper namespace="boardDao">
	<select id="cnt" resultType="int">
		select count(*) from board
	</select>
	
	<select id="list" parameterType="pageDto" resultType="board">
		<![CDATA[
		select * from (select row_number() over(order by board_no desc) rnum, 
			b.* from board b) where rnum >= #{startNo} and rnum <= #{endNo}
		]]>
	</select>
	
	<!-- 
		일반적으로 DB 작업을 하다 보면 먼저 사전에 어떤 값을 가져와서 해당 값을
		증가시킨 후 DB에 저장하거나, 혹은 입력된 후에 증가값을 가져올 필요가
		있는 경우가 많이 발생을 함.
		이런 경우에는 MyBatis에서 제공하는 selectKey 라는 태그를 이용하여
		별도의 쿼리 로직을 시용할 필요 없이 일괄 처리 작업을 할 수 있게 해 줌.
		
		* keyProperty 속성 : 해당 결과 값이 들어갈 DTO 객체의 멤버 변수명을
		                    작성하면 됨.
		* order 속성 : 해당 쿼리문의 실행 순서를 의미함.
		              - BEFORE : 원래 실행할 쿼리문 이전에 selectKey
		                         태그가 실행이 됨.
		              - AFTER : 원래 실행할 쿼리문 이후에 selectKey
		                         태그가 실행이 됨.
		                         
		※ 주의사항 : 반드시 멤버변수에 해당하는 setter()와 getter() 메서드가
		           존재해야 함.
		              
	 -->
	
	<insert id="add" parameterType="board">
		<selectKey resultType="int" keyProperty="board_no" order="BEFORE">
			select max(board_no) from board
		</selectKey>
		
		insert into board values(#{board_no} + 1, #{board_writer}, 
			#{board_title}, #{board_cont}, #{board_pwd}, default, sysdate, '')
	</insert>
	
	<update id="hit" parameterType="int">
		update board set board_hit = board_hit + 1 where board_no = #{no}
	</update>
	
	<select id="cont" parameterType="int" resultType="board">
		select * from board where board_no = #{no}
	</select>
	
	<update id="update" parameterType="board">
		update board set board_title = #{board_title}, 
			board_cont = #{board_cont} where board_no = #{board_no}
	</update>
	
	<delete id="del" parameterType="int">
		delete from board where board_no = #{no}
	</delete>
	
	<update id="seq" parameterType="int">
		<![CDATA[
		update board set board_no = board_no - 1 where board_no > #{no}
		]]>
	</update>
	
	<select id="count" parameterType="map" resultType="int">
		select count(*) from board 
		
		<if test="Field == 'title'">
			where board_title like '%' || #{Keyword} || '%'
		</if>
		
		<if test="Field == 'cont'">
			where board_cont like '%' || #{Keyword} || '%'
		</if>
		
		<if test="Field == 'title_cont'">
			where board_title like '%' || #{Keyword} || '%' or board_cont like '%' || #{Keyword} || '%'
		</if>
		
		<if test="Field == 'writer'">
			where board_writer like '%' || #{Keyword} || '%'
		</if>
	</select>
	
	<select id="search" parameterType="pageDto" resultType="board">
		select * from (select row_number() over(order by board_no desc) rnum, b.* from board b 

		<choose>
			<when test="field == 'title'">
				where board_title like '%' || #{keyword} || '%')
			</when>
			
			<when test="field == 'cont'">
				where board_cont like '%' || #{keyword} || '%')
			</when>
			
			<when test="field == 'title_cont'">
				where board_title like '%' || #{keyword} || '%' or board_cont like '%' || #{keyword} || '%')
			</when>
			
			<when test="field == 'writer'">
				where board_writer like '%' || #{keyword} || '%')
			</when>
		</choose>
		
		<![CDATA[
			where rnum >= #{startNo} and rnum <= #{endNo}
		]]>
	</select>
</mapper>