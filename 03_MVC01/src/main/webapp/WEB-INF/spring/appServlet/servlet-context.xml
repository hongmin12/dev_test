<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- 
		이 설정을 통해서 url 매핑이 일어나게 됨.
		@RequestMapping을 사용할 수 있게 됨. @RequestMapping에 지정된
		url로 브라우저의 요청이 매핑이 되게 되어 있음.
	 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- 
		매핑된 컨트롤러에서 비지니스 작업을 진행 후, 리턴되는 문자열을 받아서
		view page로 확정되는 곳임.
		view page 정보는 prefix인 /WEB-INF/views/ 뒤에 넘어온 문자열이
		붙고 그 뒤에 .jsp가 붙어서 view page 정보가 만들어짐.
	 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 
		해당 패키지에 @Controller, @Service, @Component,
		@Repository 애노테이션이 있으면 해당 클래스를 자동으로
		빈으로 만들어 주는 태그.
	 -->
	<context:component-scan base-package="com.spring.mvc01" />
	
	
	
</beans:beans>
